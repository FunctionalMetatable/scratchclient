{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"documentation Documentation for ScratchClient","title":"documentation"},{"location":"#documentation","text":"Documentation for ScratchClient","title":"documentation"},{"location":"getting-started/","text":"Getting Started To use scratchclient, you need to use Python (of course) and pip. # install scratchclient pip install scratchclient Basic Usage from scratchclient import ScratchSession # import the module session = ScratchSession(\"ceebee\", \"--uwu--\") # creates a session # post comments session.get_user(\"Paddle2See\").post_comment(\"OwO\") # lots of other stuff print(session.get_project(450216269).get_comments()[0].content) # first comment in project 450216269 print(session.get_studio(29251822).description) # description of studio 29251822 Interfacing with cloud variables from scratchclient import ScratchSession session = ScratchSession(\"griffpatch\", \"SecurePassword7\") connection = session.create_cloud_connection(450216269) connection.set_cloud_variable(\"variable name\", 5000) # @connection.on(\"set\") def on_set(variable): print(variable.name, variable.value) print(connection.get_cloud_variable(\"other variable\"))","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"To use scratchclient, you need to use Python (of course) and pip. # install scratchclient pip install scratchclient","title":"Getting Started"},{"location":"getting-started/#basic-usage","text":"from scratchclient import ScratchSession # import the module session = ScratchSession(\"ceebee\", \"--uwu--\") # creates a session # post comments session.get_user(\"Paddle2See\").post_comment(\"OwO\") # lots of other stuff print(session.get_project(450216269).get_comments()[0].content) # first comment in project 450216269 print(session.get_studio(29251822).description) # description of studio 29251822","title":"Basic Usage"},{"location":"getting-started/#interfacing-with-cloud-variables","text":"from scratchclient import ScratchSession session = ScratchSession(\"griffpatch\", \"SecurePassword7\") connection = session.create_cloud_connection(450216269) connection.set_cloud_variable(\"variable name\", 5000) # @connection.on(\"set\") def on_set(variable): print(variable.name, variable.value) print(connection.get_cloud_variable(\"other variable\"))","title":"Interfacing with cloud variables"},{"location":"api-reference/","text":"api-reference This directory houses the API reference for classes.","title":"api-reference"},{"location":"api-reference/#api-reference","text":"This directory houses the API reference for classes.","title":"api-reference"},{"location":"api-reference/Project/","text":"Project Properties id The project id of the project object. title The title of the project. description The description of the project. instructions The instructions of the project. visible A boolean representing if the project is visible or not. public A boolean representing if the project is public or not. comments_allowed A boolean representing if the project has comments allowed or not. is_published Boolean representing whether the project is published or not. author The author of the project. Methods get_comment(commentId) Gets the comment with the given commentId. love() Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Loves the project. unlove() Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Unloves the project. favorite() Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Favorites the project. unfavorite() Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Unfavorites the project. view() Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Adds a view to the project. get_scripts() Gets the Project JSON of the project. get_remixes(all=False, limit=20, offset=0) Gets the remixes of the project. If all=True, the script will continue to loop through all the remixes. If not, you can use the limit and offset to customize it for your needs. get_studios(all=False, limit=20, offset=0) Gets the studios that the project is in. If all=True, the script will continue to loop through all the studios the project is in. If not, you can use the limit and offset to customize it to your needs. post_comment(content, parent_id=\"\", commentee_id=\"\") Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Posts a comment on the project. get_comments(all=False, limit=20, offset=0) Gets the comments of the project. If all=True, the script will continue to loop through all the comments. If not, you can use the limit and offset to customize it for your needs. toggle_commenting() Toggles commenting on and off on the project. Will throw an error if you are not the project's author. turn_on_commenting() Turns on commenting on the project. Will throw an error if you are not the project's author. turn_off_commenting() Turns off commenting on the project. Will throw an error if you are not the project's author. report(category, reason, image=None) Reports the project. unshare() Unshares the project. Will throw an error if you are not the project's author. share() Shares the project. Will throw an error if you are not the project's author. set_thumbnail(file) Sets the project thumbnail to the file given.","title":"Project"},{"location":"api-reference/Project/#project","text":"","title":"Project"},{"location":"api-reference/Project/#properties","text":"","title":"Properties"},{"location":"api-reference/Project/#id","text":"The project id of the project object.","title":"id"},{"location":"api-reference/Project/#title","text":"The title of the project.","title":"title"},{"location":"api-reference/Project/#description","text":"The description of the project.","title":"description"},{"location":"api-reference/Project/#instructions","text":"The instructions of the project.","title":"instructions"},{"location":"api-reference/Project/#visible","text":"A boolean representing if the project is visible or not.","title":"visible"},{"location":"api-reference/Project/#public","text":"A boolean representing if the project is public or not.","title":"public"},{"location":"api-reference/Project/#comments_allowed","text":"A boolean representing if the project has comments allowed or not.","title":"comments_allowed"},{"location":"api-reference/Project/#is_published","text":"Boolean representing whether the project is published or not.","title":"is_published"},{"location":"api-reference/Project/#author","text":"The author of the project.","title":"author"},{"location":"api-reference/Project/#methods","text":"","title":"Methods"},{"location":"api-reference/Project/#get_commentcommentid","text":"Gets the comment with the given commentId.","title":"get_comment(commentId)"},{"location":"api-reference/Project/#love","text":"Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Loves the project.","title":"love()"},{"location":"api-reference/Project/#unlove","text":"Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Unloves the project.","title":"unlove()"},{"location":"api-reference/Project/#favorite","text":"Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Favorites the project.","title":"favorite()"},{"location":"api-reference/Project/#unfavorite","text":"Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Unfavorites the project.","title":"unfavorite()"},{"location":"api-reference/Project/#view","text":"Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Adds a view to the project.","title":"view()"},{"location":"api-reference/Project/#get_scripts","text":"Gets the Project JSON of the project.","title":"get_scripts()"},{"location":"api-reference/Project/#get_remixesallfalse-limit20-offset0","text":"Gets the remixes of the project. If all=True, the script will continue to loop through all the remixes. If not, you can use the limit and offset to customize it for your needs.","title":"get_remixes(all=False, limit=20, offset=0)"},{"location":"api-reference/Project/#get_studiosallfalse-limit20-offset0","text":"Gets the studios that the project is in. If all=True, the script will continue to loop through all the studios the project is in. If not, you can use the limit and offset to customize it to your needs.","title":"get_studios(all=False, limit=20, offset=0)"},{"location":"api-reference/Project/#post_commentcontent-parent_id-commentee_id","text":"Note: You shouldn't be using this method. Bots that do social actions get banned on scratch. This is just a proof of concept. Posts a comment on the project.","title":"post_comment(content, parent_id=\"\", commentee_id=\"\")"},{"location":"api-reference/Project/#get_commentsallfalse-limit20-offset0","text":"Gets the comments of the project. If all=True, the script will continue to loop through all the comments. If not, you can use the limit and offset to customize it for your needs.","title":"get_comments(all=False, limit=20, offset=0)"},{"location":"api-reference/Project/#toggle_commenting","text":"Toggles commenting on and off on the project. Will throw an error if you are not the project's author.","title":"toggle_commenting()"},{"location":"api-reference/Project/#turn_on_commenting","text":"Turns on commenting on the project. Will throw an error if you are not the project's author.","title":"turn_on_commenting()"},{"location":"api-reference/Project/#turn_off_commenting","text":"Turns off commenting on the project. Will throw an error if you are not the project's author.","title":"turn_off_commenting()"},{"location":"api-reference/Project/#reportcategory-reason-imagenone","text":"Reports the project.","title":"report(category, reason, image=None)"},{"location":"api-reference/Project/#unshare","text":"Unshares the project. Will throw an error if you are not the project's author.","title":"unshare()"},{"location":"api-reference/Project/#share","text":"Shares the project. Will throw an error if you are not the project's author.","title":"share()"},{"location":"api-reference/Project/#set_thumbnailfile","text":"Sets the project thumbnail to the file given.","title":"set_thumbnail(file)"},{"location":"api-reference/ScratchSession/","text":"ScratchSession The base class for the module: from scratchclient import ScratchSession session = ScratchSession(\"aVeryRandomUsername\", \"OwO\") Properties username The username of the logged in user. print(session.username) # aVeryRandomUsername session_id The session id of the logged in user. This is the scratchsessionsid entry found in your cookie. print(session.session_id) csrf_token The csrf token of the logged in user. This is the scratchcsrftoken entry found in your cookie. print(session.csrf_token) # a random string token The xToken of the logged in user. print(session.token) user The User object of the currently logged in user Methods get_user(username) Gets the User object of the given username. print(session.get_user(\"griffpatch\").scratchteam) # false get_project(id) Gets the Project object of the given project id. print(session.get_project(60917032).title) # Appel v1.4 get_studio(id) Gets the Studio object of the given studio id. print(session.get_studio(26135902).owner) # Za-Chary get_news() Gets Scratch's news and translates them into an array of News objects. print(session.get_news()[0].title) get_messages(all=false, limit=20, offset=0) Gets the messages of the logged in user as an array of Message objects. If the all parameter is specified as True, all the messages are fetched. Otherwise, they are fetched with a limit of limit messages and and offset of offset. create_cloud_connection(id) Creates a cloud connection for the specified project ID. Returns a CloudConnection object. connection = session.create_cloud_connection(104) print(connection.get_cloud_variable('foo')) explore_projects(mode=\"trending\", query) Explores Scratch projects with the specified mode and query . Returns an array of Project objects. print(session.explore_projects()[0].title) explore_studios(mode=\"trending\", query) Explores Scratch studios with the specified mode and query . Returns an array of Studio objects. search_projects(mode=\"popular\", query) Searches Scratch projects with the specified mode and query . Returns an array of Project objects. search_studios(mode=\"popular\", query) Searches Scratch studios with the specified mode and query . Returns an array of Studio objects.","title":"ScratchSession"},{"location":"api-reference/ScratchSession/#scratchsession","text":"The base class for the module: from scratchclient import ScratchSession session = ScratchSession(\"aVeryRandomUsername\", \"OwO\")","title":"ScratchSession"},{"location":"api-reference/ScratchSession/#properties","text":"","title":"Properties"},{"location":"api-reference/ScratchSession/#username","text":"The username of the logged in user. print(session.username) # aVeryRandomUsername","title":"username"},{"location":"api-reference/ScratchSession/#session_id","text":"The session id of the logged in user. This is the scratchsessionsid entry found in your cookie. print(session.session_id)","title":"session_id"},{"location":"api-reference/ScratchSession/#csrf_token","text":"The csrf token of the logged in user. This is the scratchcsrftoken entry found in your cookie. print(session.csrf_token) # a random string","title":"csrf_token"},{"location":"api-reference/ScratchSession/#token","text":"The xToken of the logged in user. print(session.token)","title":"token"},{"location":"api-reference/ScratchSession/#user","text":"The User object of the currently logged in user","title":"user"},{"location":"api-reference/ScratchSession/#methods","text":"","title":"Methods"},{"location":"api-reference/ScratchSession/#get_userusername","text":"Gets the User object of the given username. print(session.get_user(\"griffpatch\").scratchteam) # false","title":"get_user(username)"},{"location":"api-reference/ScratchSession/#get_projectid","text":"Gets the Project object of the given project id. print(session.get_project(60917032).title) # Appel v1.4","title":"get_project(id)"},{"location":"api-reference/ScratchSession/#get_studioid","text":"Gets the Studio object of the given studio id. print(session.get_studio(26135902).owner) # Za-Chary","title":"get_studio(id)"},{"location":"api-reference/ScratchSession/#get_news","text":"Gets Scratch's news and translates them into an array of News objects. print(session.get_news()[0].title)","title":"get_news()"},{"location":"api-reference/ScratchSession/#get_messagesallfalse-limit20-offset0","text":"Gets the messages of the logged in user as an array of Message objects. If the all parameter is specified as True, all the messages are fetched. Otherwise, they are fetched with a limit of limit messages and and offset of offset.","title":"get_messages(all=false, limit=20, offset=0)"},{"location":"api-reference/ScratchSession/#create_cloud_connectionid","text":"Creates a cloud connection for the specified project ID. Returns a CloudConnection object. connection = session.create_cloud_connection(104) print(connection.get_cloud_variable('foo'))","title":"create_cloud_connection(id)"},{"location":"api-reference/ScratchSession/#explore_projectsmodetrending-query","text":"Explores Scratch projects with the specified mode and query . Returns an array of Project objects. print(session.explore_projects()[0].title)","title":"explore_projects(mode=\"trending\", query)"},{"location":"api-reference/ScratchSession/#explore_studiosmodetrending-query","text":"Explores Scratch studios with the specified mode and query . Returns an array of Studio objects.","title":"explore_studios(mode=\"trending\", query)"},{"location":"api-reference/ScratchSession/#search_projectsmodepopular-query","text":"Searches Scratch projects with the specified mode and query . Returns an array of Project objects.","title":"search_projects(mode=\"popular\", query)"},{"location":"api-reference/ScratchSession/#search_studiosmodepopular-query","text":"Searches Scratch studios with the specified mode and query . Returns an array of Studio objects.","title":"search_studios(mode=\"popular\", query)"}]}